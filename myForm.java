/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Toolkit;// this library file for toolkit class
import java.awt.datatransfer.Clipboard;// for Clipboard class
import java.awt.datatransfer.StringSelection;// this library file for stringSelection class
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Aayush
 */
public class myForm extends javax.swing.JFrame {
    String ClipBoardData = "";
    /**
     * Creates new form myForm
     */
    public myForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        Delete = new javax.swing.JMenuItem();
        selectAll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Editor");
        setFocusTraversalPolicyProvider(true);

        TextArea.setColumns(20);
        TextArea.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        File.setText("File");
        File.setFocusCycleRoot(true);
        File.setFocusPainted(true);
        File.setFocusTraversalPolicyProvider(true);
        File.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });

        New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        New.setText("New");
        New.setFocusCycleRoot(true);
        New.setFocusPainted(true);
        New.setFocusTraversalPolicyProvider(true);
        New.setFocusable(true);
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        File.add(New);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Open.setText("Open");
        Open.setFocusCycleRoot(true);
        Open.setFocusPainted(true);
        Open.setFocusTraversalPolicyProvider(true);
        Open.setFocusable(true);
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        save.setText("Save");
        save.setFocusCycleRoot(true);
        save.setFocusPainted(true);
        save.setFocusTraversalPolicyProvider(true);
        save.setFocusable(true);
        File.add(save);

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        saveAs.setText("Save As");
        saveAs.setFocusCycleRoot(true);
        saveAs.setFocusPainted(true);
        saveAs.setFocusTraversalPolicyProvider(true);
        saveAs.setFocusable(true);
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        File.add(saveAs);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Edit.setText("Edit");
        Edit.setFocusCycleRoot(true);
        Edit.setFocusPainted(true);
        Edit.setFocusTraversalPolicyProvider(true);
        Edit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        Edit.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        Edit.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        Edit.add(paste);

        Delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Delete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        Edit.add(Delete);

        selectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAll.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        Edit.add(selectAll);

        jMenuBar1.add(Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addFileFilters(JFileChooser fileHandler){
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Text File (*.txt)","txt");
        FileNameExtensionFilter fileFilter1 = new FileNameExtensionFilter("C File (*.c)","c");
        FileNameExtensionFilter fileFilter2 = new FileNameExtensionFilter("C++ File (*.cpp)","cpp");
        FileNameExtensionFilter fileFilter3 = new FileNameExtensionFilter("Python File (*.py)","py");
        FileNameExtensionFilter fileFilter4 = new FileNameExtensionFilter("Word File (*.docx)","docx");
        FileNameExtensionFilter fileFilter5 = new FileNameExtensionFilter("HTML File (*.html)","html");
        FileNameExtensionFilter fileFilter6 = new FileNameExtensionFilter("PHP File (*.php)","php");
        fileHandler.setFileFilter(fileFilter1);
        fileHandler.setFileFilter(fileFilter2);
        fileHandler.setFileFilter(fileFilter3);
        fileHandler.setFileFilter(fileFilter4);
        fileHandler.setFileFilter(fileFilter5);
        fileHandler.setFileFilter(fileFilter6);
        fileHandler.setFileFilter(fileFilter);
    }
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        JFileChooser opChooser = new JFileChooser();
        addFileFilters(opChooser);
        int retValue = opChooser.showOpenDialog(null);
        File choosenFile = opChooser.getSelectedFile();
        try{
            //System.out.printf("The return value %d\n", retValue);
            //System.out.printf("The file choosen value %d\n",JFileChooser.APPROVE_OPTION );
            if(retValue==JFileChooser.APPROVE_OPTION){
                BufferedReader bf = new BufferedReader(new FileReader(choosenFile));
                TextArea.setText("");
                String data;
                while(true){
                    data=bf.readLine();
                    if(data==null)
                        break;
                    else{
                        TextArea.append(data+"\n");
                    }
                }
                bf.close();
            }
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(null, "The file didn't exist");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        TextArea.setText("");
    }//GEN-LAST:event_NewActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        JFileChooser adChooser = new JFileChooser();
        addFileFilters(adChooser);
        int returnVal = adChooser.showSaveDialog(null);
        try{
            if(returnVal==JFileChooser.APPROVE_OPTION){
                File directory = adChooser.getCurrentDirectory();
                String path = directory.getAbsolutePath();
                String fileName = adChooser.getSelectedFile().getName();
                if(fileName.contains(".txt") || fileName.contains(".c")|| fileName.contains(".cpp")|| fileName.contains(".php")|| fileName.contains(".docx")|| fileName.contains(".html")|| fileName.contains(".js")||  fileName.contains(".py")){
                    
                }
                else{
                    fileName = fileName+".txt";
                }
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path+"\\"+fileName),"UTF-8"));
                bw.write(TextArea.getText());
                bw.close();
            }
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(null, "The file couldn't be saved");
        }
    }//GEN-LAST:event_saveAsActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        // TODO add your handling code here:
        ClipBoardData = TextArea.getSelectedText();
        StringSelection stringSelection = new StringSelection(ClipBoardData);
        Clipboard clpboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpboard.setContents(stringSelection, null);
        TextArea.replaceSelection("");
    }//GEN-LAST:event_cutActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        // TODO add your handling code here:
        TextArea.addMouseListener(null);
    }//GEN-LAST:event_pasteActionPerformed

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        ClipBoardData = TextArea.getSelectedText();
        StringSelection stringSelection = new StringSelection(ClipBoardData);
        Clipboard clpboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpboard.setContents(stringSelection, null);
    }//GEN-LAST:event_copyActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        
    }//GEN-LAST:event_EditActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        TextArea.replaceSelection("");
    }//GEN-LAST:event_DeleteActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        TextArea.selectAll();
    }//GEN-LAST:event_selectAllActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new myForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JMenuItem selectAll;
    // End of variables declaration//GEN-END:variables
}
